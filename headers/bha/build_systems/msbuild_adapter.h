//
// Created by gregorian on 21/10/2025.
//

#ifndef MSBUILD_ADAPTER_H
#define MSBUILD_ADAPTER_H

#include "bha/build_systems/build_adapter.h"
#include <filesystem>

namespace bha::build_systems {

    /**
     * Represents a single MSBuild project (.vcxproj) within a solution.
     */
    struct MSBuildProject {
        std::string name;                  ///< Project name.
        std::string path;                  ///< Absolute path to the project file (.vcxproj).
        std::string configuration;         ///< Active build configuration (e.g., Debug, Release).
        std::string platform;              ///< Target platform (e.g., x64, Win32).
        std::vector<std::string> source_files; ///< List of source files in the project.
    };

    /**
     * Adapter implementation for interacting with MSBuild-based projects.
     * 
     * This class provides functionality to:
     * - Detect MSBuild solutions and projects
     * - Parse .sln and .vcxproj files
     * - Extract compile commands for build tracing
     * - Determine build order and targets
     * - Enable build tracing for performance analysis
     */
    class MSBuildAdapter final : public BuildAdapter {
    public:
        /**
         * Constructs an MSBuildAdapter for a specific build directory.
         * @param build_dir Path to the build directory containing the MSBuild solution.
         */
        explicit MSBuildAdapter(const std::string& build_dir);

        /**
         * Detects if the given directory uses MSBuild as its build system.
         * @param build_dir Path to check.
         * @return Information about the detected build system.
         */
        core::Result<BuildSystemInfo> detect_build_system(
            const std::string& build_dir
        ) override;

        /**
         * Extracts compile commands for all MSBuild projects.
         * @param build_dir Path to the MSBuild solution directory.
         * @return List of compile commands with file, directory, and arguments.
         */
        core::Result<std::vector<CompileCommand>> extract_compile_commands(
            const std::string& build_dir
        ) override;

        /**
         * Retrieves trace files generated by MSBuild (e.g., logs or trace data).
         * @param build_dir Path to the MSBuild build directory.
         * @return List of trace file paths.
         */
        core::Result<std::vector<std::string>> get_trace_files(
            const std::string& build_dir
        ) override;

        /**
         * Lists all targets defined in the MSBuild projects.
         * @param build_dir Path to the solution or project directory.
         * @return Map of target names to their associated files.
         */
        core::Result<std::map<std::string, std::vector<std::string>>> get_targets(
            const std::string& build_dir
        ) override;

        /**
         * Determines the build order of projects in the solution.
         * @param build_dir Path to the build directory.
         * @return Ordered list of project names or paths.
         */
        core::Result<std::vector<std::string>> get_build_order(
            const std::string& build_dir
        ) override;

        /**
         * Enables compiler or build tracing in MSBuild.
         * @param build_dir Path to the build directory.
         * @param compiler_type Compiler type (e.g., MSVC, Clang).
         * @return True if tracing was successfully enabled.
         */
        core::Result<bool> enable_tracing(
            const std::string& build_dir,
            const std::string& compiler_type
        ) override;

        /**
         * Parses a Visual Studio solution (.sln) to extract contained projects.
         * @param solution_path Path to the solution file.
         * @return List of MSBuild projects parsed from the solution.
         */
        static core::Result<std::vector<MSBuildProject>> parse_solution(
            const std::string& solution_path
        );

    private:
        std::filesystem::path solution_path_; ///< Path to the .sln file.
        std::filesystem::path build_log_path_; ///< Path to the MSBuild log file.

        /**
         * Retrieves the installed MSBuild version.
         * @return Version string of the detected MSBuild toolchain.
         */
        static core::Result<std::string> get_msbuild_version();

        /**
         * Finds all .vcxproj files in the solution directory.
         * @return List of project file paths.
         */
        core::Result<std::vector<std::string>> find_vcxproj_files() const;

        /**
         * Parses a .vcxproj file to extract project metadata and sources.
         * @param project_path Path to the .vcxproj file.
         * @return Parsed MSBuildProject information.
         */
        static core::Result<MSBuildProject> parse_vcxproj(const std::string& project_path);
    };

} // namespace bha::build_systems


#endif //MSBUILD_ADAPTER_H
