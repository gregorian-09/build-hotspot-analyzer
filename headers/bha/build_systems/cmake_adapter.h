//
// Created by gregorian on 21/10/2025.
//

#ifndef CMAKE_ADAPTER_H
#define CMAKE_ADAPTER_H

#include "bha/build_systems/build_adapter.h"
#include <filesystem>

namespace bha::build_systems {

    /**
     * Adapter implementation for the CMake build system.
     *
     * Provides functionality to detect CMake-based projects, extract compile commands,
     * determine build targets, retrieve build order, and enable tracing.
     */
    class CMakeAdapter final : public BuildAdapter {
    public:
        /**
         * Constructs a CMakeAdapter for the specified build directory.
         * @param build_dir Path to the CMake build directory.
         */
        explicit CMakeAdapter(const std::string& build_dir);

        /**
         * Detects whether the given directory uses CMake as its build system.
         * @param build_dir Path to the build directory.
         * @return Information about the detected CMake build system.
         */
        core::Result<BuildSystemInfo> detect_build_system(
            const std::string& build_dir
        ) override;

        /**
         * Extracts compile commands from the CMake-generated compile_commands.json file.
         * @param build_dir Path to the build directory.
         * @return Vector of compile command objects.
         */
        core::Result<std::vector<CompileCommand>> extract_compile_commands(
            const std::string& build_dir
        ) override;

        /**
         * Retrieves any trace or diagnostic files generated by CMake.
         * @param build_dir Path to the build directory.
         * @return List of trace file paths.
         */
        core::Result<std::vector<std::string>> get_trace_files(
            const std::string& build_dir
        ) override;

        /**
         * Lists all build targets defined within the CMake project.
         * @param build_dir Path to the build directory.
         * @return Map of target names and their associated source files or dependencies.
         */
        core::Result<std::map<std::string, std::vector<std::string>>> get_targets(
            const std::string& build_dir
        ) override;

        /**
         * Retrieves the build order determined by CMake.
         * @param build_dir Path to the build directory.
         * @return Ordered list of target names.
         */
        core::Result<std::vector<std::string>> get_build_order(
            const std::string& build_dir
        ) override;

        /**
         * Enables compiler tracing or instrumentation in a CMake-based project.
         * @param build_dir Path to the build directory.
         * @param compiler_type Compiler type (e.g., clang, gcc, msvc).
         * @return True if tracing was successfully enabled.
         */
        core::Result<bool> enable_tracing(
            const std::string& build_dir,
            const std::string& compiler_type
        ) override;

    private:
        std::filesystem::path compile_commands_path_; ///< Path to compile_commands.json file.
        std::filesystem::path cmake_cache_path_;      ///< Path to CMakeCache.txt file.

        /**
         * Retrieves the installed version of CMake.
         * @return Version string of the CMake installation.
         */
        core::Result<std::string> get_cmake_version() const;

        /**
         * Reads a specific variable from the CMake cache.
         * @param var_name Name of the cache variable to read.
         * @return Value of the specified variable.
         */
        core::Result<std::string> read_cache_variable(const std::string& var_name) const;

        /**
         * Checks whether the CMake project has a compile_commands.json file.
         * @return True if compile_commands.json exists in the build directory.
         */
        [[nodiscard]] bool has_compile_commands_json() const;
    };
    
} // namespace bha::build_systems

#endif //CMAKE_ADAPTER_H
