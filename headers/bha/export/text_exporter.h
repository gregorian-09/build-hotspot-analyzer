//
// Created by gregorian on 23/10/2025.
//

#ifndef TEXT_EXPORTER_H
#define TEXT_EXPORTER_H

#include "bha/export/exporter.h"

namespace bha::export_module {
    /**
     * Exports build analysis results to a plain-text report.
     *
     * The TextExporter produces a lightweight, human-readable `.txt` report
     * summarizing build metrics, hotspots, and optimization suggestions.
     * It is suitable for console output or environments where rich formatting
     * (such as HTML or Markdown) is not required.
     */
    class TextExporter final : public Exporter {
    public:
        /**
         * Configuration options controlling text output style.
         */
        struct Options {
            bool use_colors = true;       ///< Whether to apply ANSI color codes for highlighting.
            bool compact_mode = false;    ///< If true, reduces spacing and detail for a concise summary.
            int max_path_length = 80;     ///< Maximum number of characters for displayed file paths.
        };

        /**
         * Constructs a TextExporter with the specified formatting options.
         * @param options Output formatting and display preferences.
         */
        explicit TextExporter(const Options& options);

        TextExporter() : TextExporter(Options{}) {};

        /**
         * Generates and writes a plain-text build analysis report.
         *
         * @param metrics Aggregated build performance metrics.
         * @param suggestions Optimization suggestions derived from analysis.
         * @param trace Build trace data, including build steps and timings.
         * @param output_path Path to the output `.txt` file to write.
         * @return A core::Result indicating success or containing an error message.
         */
        core::Result<void> export_report(
            const core::MetricsSummary& metrics,
            const std::vector<core::Suggestion>& suggestions,
            const core::BuildTrace& trace,
            const std::string& output_path
        ) override;

        /**
         * Returns the default file extension for text exports.
         * @return The string ".txt".
         */
        [[nodiscard]] std::string get_default_extension() const override { return ".txt"; }

        /**
         * Identifies the export format produced by this class.
         * @return ExportFormat::TEXT.
         */
        [[nodiscard]] ExportFormat get_format() const override { return ExportFormat::TEXT; }

    private:
        Options options_;  ///< Configuration settings for output formatting.

        /**
         * Generates a report header containing basic build information.
         * @param trace Build trace data.
         * @return A formatted header string for inclusion in the report.
         */
        std::string generate_header(const core::BuildTrace& trace) const;

        /**
         * Produces a section summarizing build metrics.
         * @param metrics Summary data containing timing and performance information.
         * @return A human-readable text block describing the metrics.
         */
        std::string generate_metrics_section(const core::MetricsSummary& metrics) const;

        /**
         * Produces a section listing identified build hotspots.
         * @param metrics Summary data containing hotspot information.
         * @return A formatted text block describing build hotspots.
         */
        std::string generate_hotspots_section(const core::MetricsSummary& metrics) const;

        /**
         * Produces a section describing optimization suggestions.
         * @param suggestions List of suggestions generated by the analysis.
         * @return Formatted suggestion descriptions in text form.
         */
        std::string generate_suggestions_section(const std::vector<core::Suggestion>& suggestions) const;

        /**
         * Applies color codes to highlight text elements.
         * @param text The text to colorize.
         * @param color ANSI color code string (e.g., "red", "green", "yellow").
         * @return Colorized string if colors are enabled, otherwise the original text.
         */
        [[nodiscard]] std::string colorize(const std::string& text, const std::string& color) const;

        /**
         * Truncates long file paths for compact display.
         * @param path The original file path.
         * @param max_length Maximum number of characters to retain.
         * @return The truncated path string with ellipsis if necessary.
         */
        static std::string truncate_path(const std::string& path, int max_length);
    };

} // namespace bha::export_module

#endif //TEXT_EXPORTER_H
